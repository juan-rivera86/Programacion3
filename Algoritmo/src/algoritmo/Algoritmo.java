/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package algoritmo;

/**
 *
 * @author juliorivera
 */
public class Algoritmo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        long startTime, endTime;
        //Crear un arreglo a ordenar
        /*int[] arreglo={578,170,576,875,767,48,884,925,899,
        120,502,226,416,755,850,427,19,694,22,594,864,255,841,583,
        884,155,711,684,924,458,709,516,911,653,555,314,734,185,
         964,936,366,284,147,282,730,102,796,673,37,299,739,620,277,
         691,722,128,596,567,895,166,758,594,541,354,409,314,960,159,
         782,319,31,342,289,260,223,100,446,767,873,207,579,118,788,565,
         847,18,736,318,997,684,295,425,145,17,312,899,610,999,467,967,315,
         758,886,810,286,955,207,657,336,123,707,640,627,176,811,448,230,824,
         65,289,520,393,344,274,197,97,187,568,351,517,293,30,611,660,178,
         700,758,388,136,7,528,594,70,22,96,67,559,261,238,335,880,770,802,
         512,780,859,635,442,699,658,348,907,463,909,501,80,494,683,125,88,
         917,978,232,652,944,241,987,875,791,276,271,878,222,133,334,711,260,
         800,100,185,501,805,969,426,153,729,326,403,481,780,613,529,312,171,
         979,346,856,664,944,643,198,183,928,589,13,415,227,392,775,282,503,
         325,124,838,957,32,744,157,843,391,634,20,695,847,339,504,318,687,665,
         515,162,170,348,514,557,61,587,426,17,960,731,389,800,777,786,928,726,737,
         924,214,288,908,153,417,347,470,84,458,238,595,264,850,188,666,63,845,215,
         274,516,167,353,78,247,447,280,270,425,282,574,212,433,755,926,681,527,665,
         364,830,27,843,394,350,242,577,195,236,524,349,775,546,134,649,283,581,115,
         996,739,213,710,75,554,154,638,334,550,266,922,808,776,771,86,126,3,323,162,
         426,149,520,916,740,170,254,505,930,796,835,763,656,876,135,113,347,392,671,226,
         307,801,548,75,396,982,500,729,596,814,290,551,789,841,243,780,749,171,572,705,
         549,34,399,413,949,254,313,378,864,296,855,281,406,882,520,397,5,711,155,622,368,
         688,275,406,284,205,499,68,248,720,334,33,556,205,500,576,11,369,186,426,551,284,
         564,922,396,520,595,544,561,919,416,776,420,477,440,906,427,319,141,251,303,354,
         684,23,391,295,683,248,475,915,72,889,851,795,273,781,983,149,791,205,407,745,
         841,691,162,346,927,347,721,631,740,941,37,977,508,569,727,909,236,390,172,882,
         476,563,132,905,203,258,702,455,288,908,420,317,194,273,462,61,830,774,564,964,
         937,194,346,674,91,265,313,711,788,548,409,496,365,851,728,421,381,53,517,551,
         706,431,138,253,873,568,769,115,729,229,588,114,125,494,75,293,872,476,897,863,
         785,918,617,429,526,445,502,933,224,248,903,306,233,723,474,894,48,522,27,587,
         841,473,655,349,836,186,252,326,643,989,312,272,838,977,510,686,776,301,990,162,
         489,912,563,473,493,698,258,585,17,812,298,826,967,158,214,200,20,806,304,845,213,
         402,722,351,838,897,521,856,323,879,831,919,741,214,231,647,988,40,437,249,776,380,
         423,376,661,73,485,607,569,919,923,533,232,282,272,573,897,99,890,842,715,516,55,
         774,901,336,133,239,258,109,136,822,219,81,924,438,157,51,627,671,626,860,189,925,
         759,162,66,548,728,18,716,564,694,614,868,274,428,382,98,596,875,655,807,626,220,
         825,600,328,948,873,764,89,791,960,932,825,733,364,684,388,236,725,580,432,239,576,
         970,656,75,720,751,645,868,798,738,156,508,729,947,619,690,359,254,47,81,333,794,
         650,778,421,953,956,343,851,403,485,465,420,334,629,604,810,23,415,212,486,931,
         718,140,472,212,831,764,173,917,813,606,466,477,493,412,137,288,316,275,672,842,
         389,772,379,514,178,377,237,397,883,118,982,754,788,611,602,552,270,514,240,22,207,
         324,635,690,558,579,677,350,923,734,719,62,503,803,96,777,754,239,512,848,159,154,
         736,14,965,339,741,469,62,814,997,158,935,734,596,351,108,750,13,730,461,304,431,
         72,828,663,902,210,57,103,202,615,542,135,140,76,305,4,741,828,567,842,501,462,845,
         245,407,750,34,640,481,318,575,727,515,446,833,785,918,713,129,991,629,959,897,441,
         756,99,728,72,909,182,113,419,846,166,999,167,27,234,442,290,550,449,494,243,562,960,
         314,4,802,300,549,453,618,475,886,536,39,390,415,500,210,786,779,320,775,832,317,994,
         538,786,183,334,975,630,903,67,25,897,645,541,855,236,506,393,895,176,756,966,713,890,
         864,73,150,48,167,450,995,242,56,323,826,380,676,747,244,500,393,525,456,522,740,193,
         312,275,872,132,411,606,289,712,635,289,556,437,938,46,135,775,840,795,333,402,346,
         782,530,583,811,762,974,59,718,89,920,103,587,895,250,546,57,535,613,62,388,106,132,
         653,998,541,227,18,265,794,446,704,485,172,534,886,835,129,841,161,840,135,806,277,
         202,943,731,322,846,545,74,328,393,245,93,649,83,425,241,469,438,272,529,64,139,130,
         939,133,935,280,15,3,964,706,408,854,72,314,64,851,115,137,911,660,471,109,460,355,
         760,473,534,353,475,753,139,674,875,416,421,872,655,834,203,180,454,535,301,745,861,
         252,821,519,526,739,708,97,884,329,250,573,830,4,215,508,9,524,141,511,784,801,987,
         146,503,433,6,143,931,570,911,437,275,33,593,226,498,444,762,191,54,410,714,125,995,
         685,666,285,153,693,345,701,961,750,407,149,946,890,952,785,380,919,653,921,907,480,
         845,255,232,473,950,392,666,902,195,61,378,87,565,821,633,29,611,692,675,123,477,152,
         899,605,316,401,556,105,707,463,285,425,271,731,786,180,503,587,887,833,12,26,819,597,
         678,317,498,188,716,974,317,337,85,430,63,182,904,22,519,774,140,138,214,464,552,869,
         887,323,485,573,222,823,746,472,98,407,777,229,226,738,237,677,981,286,226,946,805,550,
         841,981,521,55,284,662,528,19,448,599,651,288,66,121,465,435,89,71,784,753,168};
        */
        int[] arreglo={6,5,3,1,8,7,2,4};
        Ordenamiento objetoOrdenamiento= new Ordenamiento();
        //Busqueda objetoBusqueda=new Busqueda();
        startTime=System.nanoTime();
        //objetoOrdenamiento.InsertionSort(arreglo);
        endTime=System.nanoTime();
     
      
        System.out.println("El tiempo de ejecució del algoritmo de Insertion Sort fue: "+((endTime-startTime)/1000000)+"milisegundo(s)");
        
        startTime=System.nanoTime();
        //objetoOrdenamiento.SelectionSort(arreglo);
        endTime=System.nanoTime();
        System.out.println("El tiempo de ejecución del algoritmo de Selection Sort fue: "+((endTime-startTime)/1000000)+"milisegundo(s)");
        
        startTime=System.nanoTime();
        //objetoOrdenamiento.ShellSort(arreglo);
        endTime=System.nanoTime();
        System.out.println("El tiempo de ejecución del algoritmo de Sheel Sort fue: "+((endTime-startTime)/1000000)+"milisegundo(s)");
        
        startTime=System.nanoTime();
        //objetoOrdenamiento.BubbleSort(arreglo);
        endTime=System.nanoTime();
        System.out.println("El tiempo de ejecución del algoritmo de Bubble Sort fue: "+((endTime-startTime)/1000000)+"milisegundo(s)");
        
        startTime=System.nanoTime();
        objetoOrdenamiento.sort(arreglo, 0, arreglo.length-1); 
        endTime=System.nanoTime();
        System.out.println("El tiempo de ejecución del algoritmo de Merge Sort fue: "+((endTime-startTime)/1000000)+"milisegundo(s)");
        
        startTime=System.nanoTime();
        //objetoOrdenamiento.ImprimirArregloAOrdenar(arreglo);
        //objetoOrdenamiento.QuickSort(arreglo, 0, arreglo.length-1); 
        endTime=System.nanoTime();
     
        System.out.println("El tiempo de ejecución del algoritmo de Quick Sort fue: "+((endTime-startTime)/1000000)+"milisegundo(s)");
          objetoOrdenamiento.ImprimirArregloAOrdenar(arreglo);
       int suma=0;
       for(int i=0; i < 100;i++)
       {
          suma=suma+arreglo[i];
       }
        System.out.println("El resultado de la suma es :"+ suma);
        //System.out.println("El elemento buscado es: "+objetoBusqueda.busquedaBinaria(arreglo, 2, 0, arreglo.length));
    
    }
    
}
